# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Ingress
templates:
  - ingress.yaml
  - statefulset.yaml
  - ingress-secret.yaml
values:
  - ../values.yaml
  - fixtures/default_values.yaml
set:
  ingress.enabled: true

tests:
  - it: Renders an ingress if enabled
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: apiVersion
          value: "networking.k8s.io/v1"
    template: ingress.yaml

  - it: Modifies the api version accordingly (pre 1.14)
    capabilities:
      majorVersion: 1
      minorVersion: 13
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: apiVersion
          value: "extensions/v1beta1"
    template: ingress.yaml

  - it: Modifies the api version accordingly (pre 1.19)
    capabilities:
      majorVersion: 1
      minorVersion: 18
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: apiVersion
          value: "networking.k8s.io/v1beta1"
    template: ingress.yaml

  - it: Modifies the api version accordingly (pre 1.21)
    capabilities:
      majorVersion: 1
      minorVersion: 20
    asserts:
      - isKind:
          of: Ingress
      - equal:
          path: apiVersion
          value: "networking.k8s.io/v1"
    template: ingress.yaml

  - it: Accepts a provided className
    set:
      ingress.className: "myCustomClass"
    asserts:
      - equal:
          path: spec.ingressClassName
          value: "myCustomClass"
        template: ingress.yaml

  - it: Adds extra hosts
    set:
      ingress.hostname: my.broker.tld
      ingress.extraHosts:
        - name: my.other.host.tld
          pathType: Exact
          path: /somewhere
    asserts:
      - contains:
          path: spec.rules
          content:
            host: my.broker.tld
            http:
              paths:
                - backend:
                    service:
                      name: RELEASE-NAME-snyk-universal-broker
                      port:
                        number: 8000
                  path: /
                  pathType: ImplementationSpecific
        template: ingress.yaml
      - contains:
          path: spec.rules
          content:
            host: my.other.host.tld
            http:
              paths:
                - backend:
                    service:
                      name: RELEASE-NAME-snyk-universal-broker
                      port:
                        number: 8000
                  path: /somewhere
                  pathType: Exact
        template: ingress.yaml

  - it: Respects cert-manager annotations
    set:
      ingress.tls.enabled: true
      ingress.annotations:
        cert-manager.io/cluster-issuer: myClusterIssuer
    asserts:
      - equal:
          path: spec.tls[0].secretName
          value: broker.local-tls
    template: ingress.yaml

  - it: Creates an https ingress with a new secret
    set:
      ingress.tls.enabled: true
      ingress.secrets:
        - name: "broker.local-tls"
          key: "-----BEGIN PRIVATE KEY-----\nFAKE KEY\n-----END PRIVATE KEY-----"
          certificate: "-----BEGIN CERTIFICATE-----\n FAKE CERT\n-----END CERTIFICATE-----"
    asserts:
      - contains:
          path: spec.tls
          content:
            hosts:
              - broker.local
            secretName: broker.local-tls
        template: ingress.yaml

  - it: Respects cert-manager annotations with a different hostname
    set:
      ingress.tls.enabled: true
      ingress.annotations:
        cert-manager.io/cluster-issuer: myClusterIssuer
      ingress.hostname: broker.corp.tld
    asserts:
      - equal:
          path: spec.tls[0].secretName
          value: broker.corp.tld-tls
    template: ingress.yaml

  - it: Does not create a new ingress TLS secret if existingSecret is provided
    set:
      ingress.tls.enabled: true
      ingress.tls.existingSecret: "my-test-existing-secret"
    asserts:
      - hasDocuments:
          count: 0
        template: ingress-secret.yaml
      - equal:
          path: spec.tls[0].secretName
          value: "my-test-existing-secret"
        template: ingress.yaml

  - it: Respects existing secret
    set:
      ingress.tls.enabled: true
      ingress.tls.existingSecret: "my-existing-secret"
    asserts:
      - equal:
          path: spec.tls[0].secretName
          value: my-existing-secret
    template: ingress.yaml

  - it: Defaults to first secret if no annotation or existing secret is specified
    set:
      ingress.tls.enabled: true
      ingress.secrets:
        - name: "my-new-secret"
          certificate: "-----BEGIN CERTIFICATE-----\nFAKE\n-----END CERTIFICATE-----"
          key: "-----BEGIN PRIVATE KEY-----\nFAKE\n-----END PRIVATE KEY-----"
    asserts:
      - equal:
          path: spec.tls[0].secretName
          value: my-new-secret
        template: ingress.yaml
      - isKind:
          of: Secret
        template: ingress-secret.yaml
      - hasDocuments:
         count: 1
        template: ingress-secret.yaml
      - equal:
          path: metadata.name
          value: my-new-secret
        template: ingress-secret.yaml

  - it: Creates many secrets across many hosts
    set:
      ingress.tls.enabled: true
      ingress.secrets:
        - name: "my-new-secret"
          certificate: "-----BEGIN CERTIFICATE-----\nFAKE\n-----END CERTIFICATE-----"
          key: "-----BEGIN PRIVATE KEY-----\nFAKE\n-----END PRIVATE KEY-----"
        - name: "my-second-secret"
          certificate: "-----BEGIN CERTIFICATE-----\nFAKE\n-----END CERTIFICATE-----"
          key: "-----BEGIN PRIVATE KEY-----\nFAKE\n-----END PRIVATE KEY-----"
      ingress.extraHosts:
        - name: "my.internal.tld"
          path: "/broker"
          pathType: "Prefix"
      ingress.extraTls:
        - hosts:
            - my.internal.tld
          secretName: my-second-secret
    asserts:
      - equal:
          path: spec.tls[0].secretName
          value: my-new-secret
      - equal:
          path: spec.tls[1].secretName
          value: my-second-secret
    template: ingress.yaml

  - it: Respects a custom path
    set:
      ingress.path: "/*"
    asserts:
      - equal:
          path: spec.rules[0].http.paths[0].path
          value: "/*"
    template: ingress.yaml

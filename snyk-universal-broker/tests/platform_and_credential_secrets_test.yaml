# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Secret
templates:
  - secret.yaml
  - statefulset.yaml
values:
  - ../values.yaml
  - fixtures/default_values.yaml

tests:
  - it: Creates Broker Platform Auth Secret with expected values
    asserts:
    - isKind:
          of: Secret
      template: secret.yaml
    - equal:
        path: stringData.DEPLOYMENT_ID
        value: "8b338a3b-424a-497e-836e-5e0f9486605a"
      template: secret.yaml
      documentSelector:
        path: metadata.name
        value: RELEASE-NAME-platform-secret
    - equal:
        path: stringData.CLIENT_ID
        value: "8b338a3b-424a-497e-836e-5e0f9486605a"
      template: secret.yaml
      documentSelector:
        path: metadata.name
        value: RELEASE-NAME-platform-secret
    - equal:
        path: stringData.CLIENT_SECRET
        value: "super-secret-secret"
      template: secret.yaml
      documentSelector:
        path: metadata.name
        value: RELEASE-NAME-platform-secret
    - equal:
        path: stringData.MY_GITHUB_TOKEN
        value: "not_a_real_token"
      template: secret.yaml
      documentSelector:
        path: metadata.name
        value: RELEASE-NAME-creds-secret

  - it: should use an external secret for Platform Auth
    set:
      platformAuthSecret.name: "some-existing-secret"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: some-existing-secret
        template: statefulset.yaml
      - containsDocument:
          kind: Secret
          name: RELEASE-NAME-platform-secret
        not: true

  - it: should use an external secret for Platform Auth
    set:
      platformAuthSecret.name: "some-existing-secret"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: some-existing-secret
        template: statefulset.yaml
      - containsDocument:
          kind: Secret
          name: RELEASE-NAME-platform-secret
        not: true

  - it: should create a Secret if credentialReferencesSecret.name is not provided
    template: secret.yaml
    set:
      credentialReferences:
        MY_GITHUB_TOKEN: "test-token"
        GITHUB_APP_PRIVATE_KEY: |-
          -----BEGIN RSA PRIVATE KEY-----
          FAKE KEY DATA
          -----END RSA PRIVATE KEY-----
    asserts:
        - contains:
            path: spec.template.spec.containers[0].envFrom
            content:
              secretRef:
                name: RELEASE-NAME-platform-secret
          template: statefulset.yaml
        - equal:
            path: stringData["MY_GITHUB_TOKEN"]
            value: "test-token"
          template: secret.yaml
          documentSelector:
            path: metadata.name
            value: RELEASE-NAME-creds-secret
        - equal:
            path: stringData["GITHUB_APP_PRIVATE_KEY"]
            value: |-
              -----BEGIN RSA PRIVATE KEY-----
              FAKE KEY DATA
              -----END RSA PRIVATE KEY-----
          template: secret.yaml
          documentSelector:
            path: metadata.name
            value: RELEASE-NAME-creds-secret

  - it: should reject a Secret if one or more keys are in an invalid format
    template: secret.yaml
    set:
      credentialReferences:
        9_THIS_IS_ILLEGAL: "test-token"
        THIS_IS_OK: "test-token"
        "?totallyNotSupported": "test-token"
    asserts:
        - failedTemplate:
            errorMessage: Key(s) "9_THIS_IS_ILLEGAL, ?totallyNotSupported" in .Values.credentialReferences are unsupported. All keys must be valid environment variable names.

  - it: should use an external Secret if provided
    set:
      credentialReferencesSecret.name: "my-external-secret"
    asserts:
        - contains:
            path: spec.template.spec.containers[0].envFrom
            content:
              secretRef:
                name: my-external-secret
          template: statefulset.yaml
        - hasDocuments:
            count: 1
          template: secret.yaml

  - it: allows specification of platform and credential references from one external secret
    set:
      credentialReferencesSecret.name: "my-common-secret"
      platformAuthSecret.name: "my-common-secret"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: my-common-secret
        template: statefulset.yaml
      - hasDocuments:
          count: 0
        template: secret.yaml

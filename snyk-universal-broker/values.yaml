## @section Snyk Universal Broker parameters
## @param brokerClientUrl is the address of the broker. This needs to be the address of itself. In the case of Kubernetes, you need to ensure that you are pointing to the cluster ingress you have setup.
## @param brokerServerUrl is default endpoint for broker server
## @param preflightChecks.enabled broker client preflight checks

## brokerClientUrl:http://kubernetes-ingress.domain.com:8000
brokerClientUrl: ""
## See https://docs.snyk.io/working-with-snyk/regional-hosting-and-data-residency#broker-urls for regional endpoints
## Default endpoints are for the Snyk US tenant.
brokerServerUrl: "https://broker.snyk.io"
preflightChecks:
  enabled: true

## Snyk Platform Server Auth #####
## @param deploymentId is obtained by installing the Universal Broker App at the Organization level
## @param clientId is obtained by installing the Universal Broker App at the Organization level
## @param clientSecret is obtained by installing the Universal Broker App at the Organization level
## see https://docs.snyk.io/enterprise-setup/snyk-broker/universal-broker/initial-configuration-of-the-universal-broker

deploymentId: ""
clientId: ""
clientSecret: ""

## @param existingAuthSecret  Name of existing secret with Snyk platform auth and scm credential reference data
## @param credentialReferences SCM token credential reference
existingAuthSecret: "" # Name of an existing secret if it exists
credentialReferences: []

## @param containerPort Port to open for HTTP in universal broker
containerPort: 8000

## Container's resource requests and limits
## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
## @param resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if resources is set (resources is recommended for production).

resourcesPreset: "nano"

## @param resources  Set container requests and limits for different resources like CPU or memory (essential for production workloads)
## Example:
## resources:
##   requests:
##     cpu: 2
##     memory: 512Mi
##   limits:
##     cpu: 3
##     memory: 1024Mi

resources: {}

## @param commonLabels Labels to add to all deployed objects (sub-charts are not considered)
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects (sub-charts are not considered)
##
commonAnnotations: {}

## @param podLabels Pod labels
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}

##### Liveness and Readiness Probes #####
## Configure Broker containers' options for liveness probe
## @param livenessProbe.enabled Enable livenessProbe
## @param livenessProbe.path Path for the livenessProbe
## @param livenessProbe.config.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.config.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.config.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.config.failureThreshold Failure threshold for livenessProbe

livenessProbe:
  enabled: true
  path: "/healthcheck"
  config:
    initialDelaySeconds: 3
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3

## Configure Broker containers' options for readinessProbe probe
## @param readinessProbe.enabled Enable readinessProbe
## @param readinessProbe.path Path for the readinessProbe
## @param readinessProbe.config.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.config.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.config.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.config.failureThreshold Failure threshold for readinessProbe

readinessProbe:
  enabled: true
  path: "/healthcheck"
  config:
    initialDelaySeconds: 3
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3

## HA MODE #####
## @param highAvailabilityMode.enabled snyk broker HA mode
## @param brokerDispatcherUrl is required when running snyk broker in HA mode. The Dispatcher Base Url should be specific to your region if you are using a regional Snyk platform, for example, api.eu.snyk.io.
## @param replicaCount number for snyk broker when running in HA mode (min 2, max 4)

highAvailabilityMode:
  enabled: false
brokerDispatcherUrl: "https://api.snyk.io"
replicaCount: 2

## Logging #####
## @param logLevel defines Log Level for broker client pod. Can be set to "debug" for more information
## @param logEnableBody adds additional logging by setting to true

logLevel: "info"
logEnableBody: "false"

## Enable HTTPS #####
## @param enableBrokerLocalWebserverOverHttps enables Broker client to run a HTTPS server instead of the default HTTP server
## @param httpsCert provides HTTPS cert
## @param httpsKey provides HTTPS cert key

enableBrokerLocalWebserverOverHttps: false
httpsCert: ""
httpsKey: ""

##### HTTPS Inspection #####

## @param caCert Set caCert to read certificate content from the values.yaml file as a multiline string:
## Include any/all certificates required for a full trust chain.
##
## caCert: |-
##   ----- BEGIN CERTIFICATE -----
##   < certificate data >
##   ----- END CERTIFICATE -----
##   ----- BEGIN CERTIFICATE -----
##   < another certificate >
##   ----- END CERTIFICATE -----
##
## or
##
## caCert: "----- BEGIN CERTIFICATE -----\n.....\n----- END CERTIFICATE -----"
caCert: ""

## @param disableCaCertTrust Set to `true` to disable trust validation when providing your own CA certificate.
disableCaCertTrust: false

## @param tlsRejectUnauthorized Set to "0" to disable trust validation when using self signed certificates.
tlsRejectUnauthorized: ""

##### Use behind proxy #####

## @param httpProxy Do not change unless advised by your Snyk Representative. You probably need to use HTTPS proxy setting and leave this blank. - HTTP Proxy URL
## @param httpsProxy HTTPS Proxy URL - This will apply to both Snyk Broker 
## @param noProxy provide URl here which doesn't need to go through a proxy(do not include protocol)  
httpProxy: ""
httpsProxy: ""
noProxy: ""

##### Broker Image Parameters #####
## @param image.registry [default: REGISTRY_NAME] Universal Broker image registry
## @param image.repository [default: REPOSITORY_NAME/broker] Universal Broker image repository
## @skip image.tag Universal Broker image tag (immutable tags are recommended)
## @param image.pullPolicy Universal Broker image pull policy
## @param image.pullSecrets Universal Broker image pull secrets
image:
  registry: docker.io
  repository: snyk/broker
  pullPolicy: IfNotPresent
  # Overrides the image tag. If left empty the latest version is used
  tag: ""
  pullSecrets: []
  # - name: registrySecretName

##### Service Account Values. Nothing to change here #####

serviceAccount:
  ## @param serviceAccount.create Enable creation of ServiceAccount for  Universal Broker pod
  create: true
  ## @param serviceAccount.existingServiceAccount Name of existing service account name
  existingServiceAccount: ""
  ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
  annotations: {}
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the common.names.fullname template
  name: ""

##### security context #####
  ## @param securityContext.runAsUser Set Universal Broker containers' Security Context runAsUser
  ## @param securityContext.allowPrivilegeEscalation Set Universal Broker containers' Security Context allowPrivilegeEscalation
  ## @param securityContext.capabilities.drop Drop all the Linux capabilities for Universal broker Container
  ## @param securityContext.readOnlyRootFilesystem Set Universal broker containers' Security Context readOnlyRootFilesystem
  ## @param securityContext.runAsNonRoot Set Universal Broker containers' Security Context runAsNonRoot
  ## @param securityContext.fsGroup Group ID for the volumes of the pod

securityContext:
   capabilities:
     drop:
     - ALL
   readOnlyRootFilesystem: true
   allowPrivilegeEscalation: false
   runAsNonRoot: true
   runAsUser: 1000
   fsGroup: 1000


##### Service Types #####
# If you prefer to adjust how communication to the cluster occurs, these values can be adjusted
## @param service.type Universal broker svc type
## @param service.port Universal broker svc port
## @param service.tls is running Universal broker with https
service:
  type: ClusterIP
  port: 8000
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


##### Optionally Deploy a Broker Ingress Resource #####
## @param ingress.enabled Set to true to create an Ingress
## @param ingress.ingressClassName Optionally define the Ingress Class for this ingress - otherwise leave blank
## @param ingress.hosts define the host associated with this ingress - add Broker_client_url here
## @param ingress.tls.enabled Set to true to enable TLS on the in-built ingress
## @param ingress.tls.secret.name Either specify the name of a pre-existing Kubernetes secret containing TLS secrets, or leave blank to create a new secret
## @param ingress.tls.secret.key [string] The TLS key for TLS encryption, in PEM format
## @param ingress.tls.secret.cert [string] The TLS certificate for TLS encryption, in PEM format
## @param ingress.annotations Additional annotations for the Ingress resource.
## @param ingress.path Path for the default host
## @param ingress.pathType Ingress path type
## @param ingress.extraPaths Any additional arbitrary paths that may need to be added to the ingress under the main host.
## @param ingress.existingSecret It is you own the certificate as secret.
ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
    ## E.g.
    ## kubernetes.io/ingress.class: nginx
    ## kubernetes.io/tls-acme: "true"
  path: /
  pathType: Prefix
  hosts:
    - <ENTER_BROKER_CLIENT_URL> # Must match the Broker client url
  ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
  extraPaths: []
  existingSecret: ""
  tls:
    enabled: false
    secret:
      name: ""
      key: |
        # Should start with -----BEGIN PRIVATE KEY-----

      cert: |
        # Should start with -----BEGIN CERTIFICATE-----

## @param extraVolumes Optionally specify extra list of additional volumes for Universal Broker container
extraVolumes: []

## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for Universal Broker container
extraVolumeMounts: []

